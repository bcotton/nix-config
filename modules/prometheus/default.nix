{
  config,
  pkgs,
  self,
  ...
}: let
  # https://blog.korfuri.fr/posts/2022/11/autogenerated-prometheus-configs-for-multiple-nixos-hosts/
  lib = pkgs.lib;
  # Find all the hosts who have a node_exporter enabled
  enabledNodeExportersF = hostName: host:
    lib.filterAttrs (k: v:
      if builtins.isAttrs v && k == "node"
      then v.enable == true
      else false)
    host.config.services.prometheus.exporters;

  # Build the scrape config for each enabled node_exporter
  mkScrapeConfigExporterF = hostname: ename: ecfg: {
    job_name = "${hostname}-${ename}";
    static_configs = [{targets = ["${hostname}:${toString ecfg.port}"];}];
    relabel_configs = [
      {
        target_label = "instance";
        replacement = "${hostname}";
      }
      {
        target_label = "job";
        replacement = "${ename}";
      }
    ];
  };

  # From all the know hosts, fetch the enabled node_exporters
  enabledExporters = builtins.mapAttrs enabledNodeExportersF self.nixosConfigurations;

  # Build the scrape config for each host
  mkScrapeConfigHost = name: exporters:
    builtins.mapAttrs (mkScrapeConfigExporterF name) exporters;
  scrapeConfigsByHost = builtins.mapAttrs mkScrapeConfigHost enabledExporters;

  # Flatten the scrapeConfigsByHost into a list
  autogenScrapeConfigs = lib.flatten (map builtins.attrValues (builtins.attrValues scrapeConfigsByHost));
in {
  imports = [
    ./alert-manager.nix
  ];

  services.prometheus = {
    enable = true;
    port = 9001;
    extraFlags = [
      "--log.level=debug"
    ];
    rules = [
      (builtins.readFile ./prometheus.rules.yaml)
    ];
    exporters = {
      blackbox = {
        enable = true;
        configFile = "${./blackbox.yml}";
      };
    };

    alertmanagers = [
      {
        scheme = "http";
        static_configs = [
          {
            targets = [
              "127.0.0.1:${toString config.services.prometheus.alertmanager.port}"
            ];
          }
        ];
      }
    ];

    scrapeConfigs =
      [
        {
          job_name = "blackbox_http";
          metrics_path = "/probe";
          params = {
            module = ["http_2xx"];
          };
          static_configs = [
            {
              targets = [
                "books"
                "photos:3001"
              ];
            }
          ];
          relabel_configs = [
            {
              source_labels = ["__address__"];
              target_label = "__param_target";
              replacement = "http://$1";
            }
            {
              source_labels = ["__address__"];
              regex = "^([^/]+)(/.*)?";
              target_label = "instance";
            }
            {
              target_label = "__address__";
              replacement = "127.0.0.1:9115";
            }
          ];
        }
        {
          job_name = "pve";
          scrape_interval = "15s";
          static_configs = [
            {
              targets = [
                "192.168.5.200"
              ];
            }
          ];
          metrics_path = "/pve";
          params = {
            module = ["default"];
            cluster = ["1"];
            node = ["1"];
          };
          relabel_configs = [
            {
              source_labels = ["__address__"];
              target_label = "__param_target";
            }
            {
              source_labels = ["__param_target"];
              target_label = "instance";
            }
            {
              target_label = "__address__";
              replacement = "localhost:9221";
            }
          ];
        }
      ]
      ++ autogenScrapeConfigs;
  };
}
